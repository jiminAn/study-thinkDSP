{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "DIgital Image Processing Fundamentals"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "0. Introduction\n",
    "Images are NumPyâ€™s arrays np.ndarray\n",
    "\n",
    "image: np.ndarray \n",
    "pixels: array values: a[2, 3] \n",
    "channels:array dimensions \n",
    "image encoding: dtype (np.uint8, np.uint16, np.float) \n",
    "filters: functions (numpy, skimage, scipy)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "check = np.zeros((9, 9))\n",
    "check[::2, 1::2] = 1\n",
    "check[1::2, ::2] = 1\n",
    "import matplotlib.pyplot as plt\n",
    "plt.imshow(check, cmap='gray', interpolation='nearest')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import skimage\n",
    "from skimage import data\n",
    "\n",
    "camera = data.camera()\n",
    "# image pixel data type\n",
    "camera.dtype"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# image size and the number of channel\n",
    "camera.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Check image variable type\n",
    "type(camera)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# minimun and maximum pixel values \n",
    "camera.min(), camera.max()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#image save to file and read from file\n",
    "from skimage import io\n",
    "io.imsave('my_camera.png', camera)\n",
    "cam = io.imread('my_camera.png')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#gray lelvel image display\n",
    "plt.imshow(cam, cmap=plt.cm.gray)\n",
    "plt.title(\"camera man (gray)\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# pixel value modification\n",
    "cam1 = cam.copy()\n",
    "cam1[:50, 100:150]=255\n",
    "plt.imshow(cam1, cmap=plt.cm.gray)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# image transpose \n",
    "cam2 = cam.transpose()\n",
    "plt.imshow(cam2, cmap=plt.cm.gray)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# numpy indexing\n",
    "cam1[200,201]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#image rotation by 90 degrees clockwise\n",
    "Nx = camera.shape[0]\n",
    "Ny = camera.shape[1]\n",
    "cam3 = np.zeros([512,512], dtype='uint8')\n",
    "for i in range(Nx):\n",
    "    for j in range(Ny):\n",
    "        cam3[j,Ny-1-i] = cam[i,j]\n",
    "plt.imshow(cam3, cmap=plt.cm.gray)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#color images \n",
    "cat = data.chelsea()\n",
    "type(cat)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "cat.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "cat[10,20]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.imshow(cat)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "cat[50:55, 60:70]=0\n",
    "plt.imshow(cat)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "reddish = cat[:, :, 0] > 160\n",
    "cat[reddish] = [255, 0, 0]\n",
    "plt.imshow(cat)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def convolve(image, kernel, scale=1):\n",
    "\t(iH, iW) = image.shape[:2]\n",
    "\t(kH, kW) = kernel.shape[:2]\n",
    "\n",
    "\tpad = (kW - 1)//2\n",
    "\toutput = np.zeros((iH-2*pad, iW-2*pad), dtype=\"float32\")\n",
    "\n",
    "\t# loop over the input image, \"sliding\" the kernel across each (x, y)-coordinate from left-to-right and top to bottom\n",
    "\tfor y in np.arange(pad, iH - pad):\n",
    "\t\tfor x in np.arange(pad, iW - pad):\n",
    "\t\t\troi = image[y-pad:y+pad+1, x-pad:x+pad+1]\n",
    "\t\t\toutput[y-pad, x-pad] = (roi * kernel).sum()*scale\n",
    "\t\t\t\n",
    "\t# rescale the output image to be in the range [0, 255]\n",
    "\t#output = rescale_intensity(output, in_range=(0, 255))\n",
    "\t#output = (output * 255).astype(\"uint8\")\n",
    " \n",
    "\t# return the output image\n",
    "\treturn output"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "Ave = np.array((\n",
    "\t[1,1,1,1,1],\n",
    "    [1,1,1,1,1],\n",
    "    [1,1,1,1,1],\n",
    "\t[1,1,1,1,1],\n",
    "\t[1,1,1,1,1]), dtype=\"int\")\n",
    "\n",
    "filtered = convolve(cat[:,:,0], Ave, scale=1/25)\n",
    "plt.imshow(filtered, cmap=plt.cm.gray)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
